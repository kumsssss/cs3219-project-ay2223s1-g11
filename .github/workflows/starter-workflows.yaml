name: Node.js CI

on:
  push:
    branches: [ test-deployment ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: macos-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - working-directory: ./chat-service
      - run: npm i
      - run: npm run build --if-present

      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - working-directory: ./collaboration-service
      - run: npm i
      - run: npm run build --if-present

      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - working-directory: ./frontend
      - run: npm i
      - run: npm run build --if-present

      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - working-directory: ./history-service
      - run: npm i
      - run: npm run build --if-present

      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - working-directory: ./matching-service
      - run: npm i
      - run: npm run build --if-present

      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - working-directory: ./question-service
      - run: npm i
      - run: npm run build --if-present

      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - working-directory: ./user-service
      - run: npm i
      - run: npm run build --if-present

      - name: Generate deployment package [Chat microservice]
        working-directory: ./chat-service
        run: zip -r deployment.zip * -x "**node_modules**" ".env" "package-lock.json" ".gitignore"

      - name: Generate deployment package [Collaboration microservice]
        working-directory: ./collaboration-service
        run: zip -r deployment.zip * -x "**node_modules**" ".env" "package-lock.json"

      - name: Generate deployment package [Frontend microservice]
        working-directory: ./frontend
        run: zip -r deployment.zip * -x "**node_modules**" "package-lock.json"

      - name: Generate deployment package [History microservice]
        working-directory: ./history-service
        run: zip -r deployment.zip * -x "**node_modules**" ".env" "package-lock.json"

      - name: Generate deployment package [Matching microservice]
        working-directory: ./matching-service
        run: zip -r deployment.zip * -x "**node_modules**" "dev.sqlite" "package-lock.json" ".env"

      - name: Generate deployment package [Question microservice]
        working-directory: ./question-service
        run: zip -r deployment.zip * -x "**node_modules**" ".env" "package-lock.json"

      - name: Generate deployment package [User microservice]
        working-directory: ./user-service
        run: zip -r deployment.zip * -x "**node_modules**" ".env" "package-lock.json"


      - name: Get timestamp
        uses: gerred/actions/current-time@master
        id: current-time

      - name: Run string replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: '-'
          flags: 'g'

      - name: Beanstalk Deploy for chat microservice
        uses: einaregilsson/beanstalk-deploy@v10
        with:
          aws_access_key: ${{secrets.AWS_ACCESS_KEY}}
          aws_secret_key: ${{secrets.AWS_SECRET_KEY}}
          application_name: "CS3219-Project"
          environment_name: "Cs3219project-env-chat"
          region: "ap-southeast-1"
          version_label: "CS3219-Project-${{ steps.format-time.outputs.replaced }}"
          deployment_package: ./chat-service/deployment.zip

      - name: Beanstalk Deploy for collaboration microservice
        uses: einaregilsson/beanstalk-deploy@v10
        with:
          aws_access_key: ${{secrets.AWS_ACCESS_KEY}}
          aws_secret_key: ${{secrets.AWS_SECRET_KEY}}
          application_name: "CS3219-Project"
          environment_name: "Cs3219project-env-collab"
          region: "ap-southeast-1"
          version_label: "CS3219-Project-${{ steps.format-time.outputs.replaced }}"
          deployment_package: ./collaboration-service/deployment.zip
        

      - name: Beanstalk Deploy for frontend microservice
        uses: einaregilsson/beanstalk-deploy@v10
        with:
          aws_access_key: ${{secrets.AWS_ACCESS_KEY}}
          aws_secret_key: ${{secrets.AWS_SECRET_KEY}}
          application_name: "CS3219-Project"
          environment_name: "prod"
          region: "ap-southeast-1"
          version_label: "CS3219-Project-${{ steps.format-time.outputs.replaced }}"
          deployment_package: ./frontend/deployment.zip          

      - name: Beanstalk Deploy for history microservice
        uses: einaregilsson/beanstalk-deploy@v10
        with:
          aws_access_key: ${{secrets.AWS_ACCESS_KEY}}
          aws_secret_key: ${{secrets.AWS_SECRET_KEY}}
          application_name: "CS3219-Project"
          environment_name: "Cs3219project-env-history"
          region: "ap-southeast-1"
          version_label: "CS3219-Project-${{ steps.format-time.outputs.replaced }}"
          deployment_package: ./history-service/deployment.zip          

      - name: Beanstalk Deploy for matching microservice
        uses: einaregilsson/beanstalk-deploy@v10
        with:
          aws_access_key: ${{secrets.AWS_ACCESS_KEY}}
          aws_secret_key: ${{secrets.AWS_SECRET_KEY}}
          application_name: "CS3219-Project"
          environment_name: "Cs3219project-env-matching"
          region: "ap-southeast-1"
          version_label: "CS3219-Project-${{ steps.format-time.outputs.replaced }}"
          deployment_package: ./matching-service/deployment.zip          

      - name: Beanstalk Deploy for question microservice
        uses: einaregilsson/beanstalk-deploy@v10
        with:
          aws_access_key: ${{secrets.AWS_ACCESS_KEY}}
          aws_secret_key: ${{secrets.AWS_SECRET_KEY}}
          application_name: "CS3219-Project"
          environment_name: "Cs3219project-env-question"
          region: "ap-southeast-1"
          version_label: "CS3219-Project-${{ steps.format-time.outputs.replaced }}"
          deployment_package: ./question-service/deployment.zip          

      - name: Beanstalk Deploy for user microservice
        uses: einaregilsson/beanstalk-deploy@v10
        with:
          aws_access_key: ${{secrets.AWS_ACCESS_KEY}}
          aws_secret_key: ${{secrets.AWS_SECRET_KEY}}
          application_name: "CS3219-Project"
          environment_name: "Cs3219project-env-user"
          region: "ap-southeast-1"
          version_label: "CS3219-Project-${{ steps.format-time.outputs.replaced }}"
          deployment_package: ./user-service/deployment.zip   

      - name: Deployed!
        run: echo App deployed to EL
